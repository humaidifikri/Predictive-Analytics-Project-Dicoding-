# -*- coding: utf-8 -*-
"""predictive_analytics_online_gaming_behavior.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZQutfy8J914w_fkcceEBL9dKl4QQs7xT

# Import Library

Meng-import library yang akan kita gunakan seperti pandas, numpy, sklearn, dan xgboost
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix,ConfusionMatrixDisplay,classification_report,accuracy_score
from sklearn.ensemble import RandomForestClassifier

from xgboost import XGBClassifier

"""# Data Understanding

## Data Loading

Membuat variabel `df` untuk menampung dataset dan menampilkan 10 baris pertama
"""

df = pd.read_csv('online_gaming_behavior_dataset.csv')
df.head()

"""## Exploratory Data Analysis

Melihat info variabel/feature yang ada di dataset dan melihat ukuran dataset
"""

df.info()

df.shape

"""Melihat ringkasan singkat tentang dataset"""

df.describe()

"""Melihat Missing Value dan Oultier"""

df.isna().sum()

"""Visualisasi pada fitur 'Age' untuk melihat outliers"""

sns.boxplot(data=df,x=df['Age']);

"""Visualisasi pada fitur 'PlayTimeHours' untuk melihat outliers"""

sns.boxplot(data=df,x=df['PlayTimeHours']);

"""Visualisasi pada fitur 'SessionsPerWeek' untuk melihat outliers"""

sns.boxplot(data=df,x=df['SessionsPerWeek']);

"""Visualisasi pada fitur 'AvgSessionDurationMinutes' untuk melihat outliers"""

sns.boxplot(data=df,x=df['AvgSessionDurationMinutes']);

"""Visualisasi pada fitur 'PlayerLevel' untuk melihat outliers"""

sns.boxplot(data=df,x=df['PlayerLevel']);

"""Visualisasi pada fitur 'AchievementsUnlocked' untuk melihat outliers"""

sns.boxplot(data=df,x=df['AchievementsUnlocked']);

"""#### Data kita bersih dari outlier

Univariate Analysis untuk fitur numerik
"""

df.hist(bins=50,figsize=(20,15))
plt.show();

"""Univariate Analysis untuk fitur 'Gender'"""

df['Gender'].value_counts().plot(kind='bar',figsize=(4,2));

"""Univariate Analysis untuk fitur 'Location'"""

df['Location'].value_counts().plot(kind='bar',figsize=(4,2));

"""Univariate Analysis untuk fitur 'GameGenre'"""

df['GameGenre'].value_counts().plot(kind='bar',figsize=(4,2));

"""Univariate Analysis untuk fitur 'GameDifficulty'"""

df['GameDifficulty'].value_counts().plot(kind='bar',figsize=(4,2));

"""#### Multivariate Analysis

Untuk melakukan multivariate analysis kita harus mencopy dataframe agar data asli tetap konsisten
dan mengubah target menjadi tipe datanumerik/angka.
'Low':0,'Medium':1,'High':2,
"""

df_copy = df.copy()
df_copy['EngagementLevel'] = df_copy['EngagementLevel'].map({'Low':0,'Medium':1,'High':2})
df_copy.dtypes

"""Melihat korelasi antar fitur dan target"""

plt.figure(figsize=(15,10))
sns.heatmap(df_copy.corr(),annot=True);

"""# Data Preparation

Konversi target ke tipe data numerik
"""

df['EngagementLevel'] = df['EngagementLevel'].map({'Low':0,'Medium':1,'High':2})

"""Data Splitting dan Encode fitur kategori"""

X = df.drop(columns=['PlayerID','EngagementLevel'])
y = df.EngagementLevel

# Encode
X_encode = pd.get_dummies(X,columns=['Gender','Location','GameGenre','GameDifficulty'])

# Data splitting
X_train, X_test, y_train, y_test = train_test_split(X_encode, y, test_size=0.2,stratify=y,shuffle=True,random_state=42)
X_train.shape, X_test.shape, y_train.shape, y_test.shape

"""# Modeling

###### Random Forest

Variabel `rf_clf` berfungsi untuk menampung algoritma `RandomForestClassifier()` dan akan di fit ke data latih

Variabel `y_pred_rf` berfungsi untuk menampung hasil prediksi yang dibuat oleh `rf_clf`

Dan hasil akurasi ditampilkan menggunakan fungsi `accuracy_score`
"""

rf_clf = RandomForestClassifier(random_state=42)
rf_clf.fit(X_train,y_train)

# Prediksi
y_pred_rf = rf_clf.predict(X_test)
print(f'Akurasi: {accuracy_score(y_test,y_pred_rf)}')

"""###### XGBoost

Variabel `xgb_clf` berfungsi untuk menampung algoritma `XGBClassifier()` dan akan di fit ke data latih

Variabel `y_pred_xgb` berfungsi untuk menampung hasil prediksi yang dibuat oleh `xgb_clf`

Dan hasil akurasi ditampilkan menggunakan fungsi `accuracy_score`
"""

xgb_clf = XGBClassifier(objective='multi:softmax',seed=42)
xgb_clf.fit(X_train,
        y_train,
        verbose=True,
        early_stopping_rounds=20,
        eval_metric='mlogloss',
        eval_set=[(X_test,y_test)])

# Prediksi
y_pred_xgb = xgb_clf.predict(X_test)
print(f'Akurasi: {accuracy_score(y_test,y_pred_xgb)}')

"""# Evaluation

Variabel `cm_rf` untuk menampung hasil dari fungsi `confusion_matrix` dari data tes dan prediksi model **RandomForest**

Variabel `disp` untuk menampung hasil dari fungsi ConfusionMatrixDisplay yang akan di tampilkan

Menampilkan hasil dari fungsi `classification_report` untuk melihat hasil dari klasifikasi model kita
"""

cm_rf = confusion_matrix(y_test,y_pred_rf)

disp = ConfusionMatrixDisplay(confusion_matrix=cm_rf,display_labels=['Low', 'Medium', 'High'])
disp.plot();

print(classification_report(y_test,y_pred_rf))

"""Variabel `cm_xgb` untuk menampung hasil dari fungsi `confusion_matrix` dari data tes dan prediksi model **XGBoost**

Variabel `disp` untuk menampung hasil dari fungsi `ConfusionMatrixDisplay` yang akan di tampilkan

Menampilkan hasil dari fungsi `classification_report` untuk melihat hasil dari klasifikasi model kita
"""

cm_xgb = confusion_matrix(y_test,y_pred_xgb)

disp = ConfusionMatrixDisplay(confusion_matrix=cm_xgb,display_labels=['Low', 'Medium', 'High'])
disp.plot();

print(classification_report(y_test,y_pred_xgb))